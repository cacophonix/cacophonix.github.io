<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Just curious]]></title>
  <link href="http://cacophonix.github.io/atom.xml" rel="self"/>
  <link href="http://cacophonix.github.io/"/>
  <updated>2018-04-06T03:03:49+08:00</updated>
  <id>http://cacophonix.github.io/</id>
  <author>
    <name><![CDATA[Ashiqul Mostofa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Started Learning Golang, Implemented LRU Cache]]></title>
    <link href="http://cacophonix.github.io/blog/2018/04/06/stated-learning-golang-implemented-lru-cache/"/>
    <updated>2018-04-06T02:56:48+08:00</updated>
    <id>http://cacophonix.github.io/blog/2018/04/06/stated-learning-golang-implemented-lru-cache</id>
    <content type="html"><![CDATA[<p>Few Days ago I have started learning GO. Implemented LRU cache. its fun.
File /Users/ashiqulmostofa/blog/octopress/source/downloads/code/lru.go could not be found</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Concurrency vs Parallelism]]></title>
    <link href="http://cacophonix.github.io/blog/2018/02/13/concurrency-vs-parallelism/"/>
    <updated>2018-02-13T00:07:38+08:00</updated>
    <id>http://cacophonix.github.io/blog/2018/02/13/concurrency-vs-parallelism</id>
    <content type="html"><![CDATA[<ul>
<li>Concurrency is about dealing with lots of things at once.</li>
<li>Parallelism is about doing lots of things at once.</li>
<li>Not the same, but related.</li>
<li>Concurrency is about structure, parallelism is about execution.</li>
<li>Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.</li>
<li>Concurrency is a way to structure a program by breaking it into pieces that can be executed independently.</li>
</ul>


<p>Reference: <a href="https://talks.golang.org/2012/waza.slide">https://talks.golang.org/2012/waza.slide</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function Closure in Go]]></title>
    <link href="http://cacophonix.github.io/blog/2018/02/12/function-closure-in-go/"/>
    <updated>2018-02-12T23:36:23+08:00</updated>
    <id>http://cacophonix.github.io/blog/2018/02/12/function-closure-in-go</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things to Keep in Mind About Go]]></title>
    <link href="http://cacophonix.github.io/blog/2018/02/12/things-to-keep-in-mind-about-go/"/>
    <updated>2018-02-12T23:33:40+08:00</updated>
    <id>http://cacophonix.github.io/blog/2018/02/12/things-to-keep-in-mind-about-go</id>
    <content type="html"><![CDATA[<ul>
<li>Any variable that begins with a capital letter means it will be exported, private otherwise.</li>
<li>The same rule applies for functions and constants, no public or private keyword exists in Go.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Case if I Forget How to Setup Octopress in Another Machine]]></title>
    <link href="http://cacophonix.github.io/blog/2018/02/12/in-case-if-i-forget-how-to-setup-octopress-in-another-machine/"/>
    <updated>2018-02-12T04:51:51+08:00</updated>
    <id>http://cacophonix.github.io/blog/2018/02/12/in-case-if-i-forget-how-to-setup-octopress-in-another-machine</id>
    <content type="html"><![CDATA[<p>Recently I had not been in touch with my blog and  forgot the whole process of using my blog in a new machine.</p>

<p>Initialization</p>

<pre><code>git clone -b source git@github.com:cacophonix/cacophonix.github.io octopress
cd octopress
git clone git@github.com:cacophonix/cacophonix.github.io _deploy
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
rake setup_github_pages
</code></pre>

<p>Pushing changes from one machine</p>

<pre><code>rake generate
git add .
git commit -am "Some comment here."
git push origin source  # update the remote source branch
rake deploy             # update the remote master branch
</code></pre>

<p>From another machine</p>

<pre><code>cd octopress
git pull origin source  # update the local source branch
cd ./_deploy
git pull origin master  # update the local master branch
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/</span></code></pre></td></tr></table></div></figure>


<p>or this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://stackoverflow.com/questions/20765692/how-to-setup-octopress-if-you-already-have-one-in-github</span></code></pre></td></tr></table></div></figure>


<p> I am just writing it down in case i forgot again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SRM 626]]></title>
    <link href="http://cacophonix.github.io/blog/2014/07/05/srm-626/"/>
    <updated>2014-07-05T16:09:38+08:00</updated>
    <id>http://cacophonix.github.io/blog/2014/07/05/srm-626</id>
    <content type="html"><![CDATA[<p>divition 2 level 2 problem was a nice problem. In this problem we are said that we have won a game in dice competition! and are asked to
return the expected value of the dice. the solution is (sum of the numbers of winning position)/(number of events that i win).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Domain Names in Localhost]]></title>
    <link href="http://cacophonix.github.io/blog/2014/06/22/testing-domain-names-in-localhost/"/>
    <updated>2014-06-22T21:39:52+08:00</updated>
    <id>http://cacophonix.github.io/blog/2014/06/22/testing-domain-names-in-localhost</id>
    <content type="html"><![CDATA[<p>I was testing my local Apache configuration. In those tutorials the examples were using domain names like
www.example.com or www.test.com. I was wondering how can i test these examples. then I just googled and found
that I can easily test them in my PC without purchasing the domain names and configuring DNS.</p>

<p>the magic thing is there is a file in /etc/hosts in my ubuntu that contains</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1  localhost
</span></code></pre></td></tr></table></div></figure>


<p>The format here is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;ip-address&gt; &lt;space&gt; &lt;site-domain&gt;
</span></code></pre></td></tr></table></div></figure>


<p>If I add</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.1.1.1 test.com
</span></code></pre></td></tr></table></div></figure>


<p>then if I write in the address bar of my browser &ldquo;test.com&rdquo; then the browser will automatically load the 127.1.1.1 ip address.</p>

<p>Isn&rsquo;t it awesome ?</p>
]]></content>
  </entry>
  
</feed>
